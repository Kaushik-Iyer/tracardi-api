{"file_name": "docs/plugins/tutorial/part2.md", "questions": ["What is the purpose of the `set_up` method in the plugin life cycle?"], "answer": "# Part 2: Configuring the plugin in Tracardi\nIn the next part of our tutorial, we will learn how to configure a plugin and how to add a configuration form to that\nplugin.\n\nIn the previous tutorial we wrote the plugin that performs a simple action and checks if the event we are processing\nis equal to \"my-type\". Our code looked like this:\n\n!!! Info\n    Please click (+) to see the comments for the code\n\n```python\nif self.event.type == \"my-event\":  # (1)\n    return Result(port=\"MyEvent\", value=payload)\nelse:\n    return Result(port=\"NotMyEvent\", value={})\n```\n\n1. `self.event` gets the event that is being processed from the internal workflow state.\n\nYou can see that such plugin is not very useful, because the user cannot configure it to change \"my-event\" to any\ndefined event type. Let's try to change that.\n\nFrom the previous tutorial, we remember that the plugin has the following life cycle:\n\n    __init __ ()\n    async set_up (config)\n    async run (input_payload)\n    async close ()\n\nIt is easy to notice that it has a `set_up` method that accepts the `config` parameter, which is the plug-in's\nconfiguration. In the Tracardi system, the configuration is performed while editing the plug-in. We can do this in two\nways.\n\nThe first by providing a dictionary with configuration values (Below is a screenshot showing such a configuration in the\nJSON Editor and Configuration Form)\n\n=== \"JSON configuration editor\"\n    ![JSON configuration editor](../../images/JSON_configuration_editor.png)\n=== \"Configuration form\"\n    ![Configuration form](../../images/configuration_form.png)\n\nThe second way is to complete the form. It is related to the JSON configuration in such a way that when filling in the\nform fields, we automatically fill/change the JSON object.\n\n\n\nThe first way is available out-of-the-box. Developer defines the default JSON object when registering the plugin and\nthis is it. This object will appear in the `set_up` method as a `config` parameter.\n\nSo let's expand our plugin with configuration."}