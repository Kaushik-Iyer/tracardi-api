{"file_name": "docs/plugins/tutorial/part3.md", "questions": ["What question does the following text answer?", "What steps are necessary to create a resource in Tracardi?"], "answer": "## Resource\nIn many cases, it is necessary to link the plug-in to some resource. It can be e.g. a database, API, etc. Usually, such\nresources need login credentials. We don't want to keep them in a plugin as they can be used in many plugins. For this\npurpose, it is necessary to create a resource. The resource consists of credential data and sometimes a URL.\n\nFor example, let's add a functionality to our plugin that will send the data pointed by the user to the defined API (a\nresource).\n\nFor this purpose, we will create a resource that will have the following data\n\n```json\n{\n  \"url\": \"api-url\",\n  \"method\": \"api-method\",\n  \"api_key\": \"api-key\"\n}\n```\n\nThe resources are created in the `tracardi/service/setup/setup_resources.py` directory\n\nWe add the following code to the `get_resource_types()` function\n\n```python\nResourceSettings(\n    id=\"my-api-url\",  # (1)\n    name=\"Custom API URL\",  # (2)\n    icon=\"web\",  # (3)\n    tags=[\"api\"],  # (4)\n    config={  # (5)\n        \"url\": \"<api-url>\",\n        \"method\": \"<api-method>\",\n        \"api_key\": \"<api-key>\"\n        },\n    manual=\"custom_api_url_resource\"  # (6)\n),\n```\n\n1. Resource Id. A unique string that identifies the resource.\n2. Resource name\n3. Resource icon.\n4. The tag that describes the resource. It is used to filter the resources in the plugin form.\n5. Resource configuration `*.md` file name __containing documentation__ on how to get authorization data, e.g. \n   when the resource is an external system. \n6. The documentation file is located in the __tracardi-api/docs/resources__ directory\n\nThis is the set of data the system needs to add a resource. After restarting the server, we can click on `Resources` in\nthe Tracardi GUI menu, then `Add new resource` and the list of resources will include `Custom API URL`. The resource we just created.\nThe form will also include an object:\n\n```json\n{\n  \"url\": \"<api-url>\",\n  \"method\": \"<api-method>\",\n  \"api_key\": \"<api-key>\"\n}\n```\n\nwhich we defined in the config property and which should be filled by the user.\n\n### Loading resource\n\nOnce we have a resource, we can load it in our plugin. We do this in the `set_up` method. We add the following two lines\nto the `set_up` method\n\n```python\nresource = await storage.driver.resource.load (config.resource.id) # (1)\nself.credentials = resource.credentials.get_credentials (self, output = MyResourceConfig) # (2)\n```\n\n1. Read resource id from `config.resource.id`. Note the object `config.resource` must be defined in the config \n2. Get data for authorization (credentials), which is an object defined in `ResourceSettings` in the `config` property,\n   and filled in by the user when creating the resource.\n\nThe first line reads the resource id from `config.resource.id`. Note that we do not have such field in the config yet\nand we need to add it (we'll do it in a moment)\n\nThe second line reads `credentials` from the resource, i.e. the object that we defined in the `config` property of\nthe `ResourceSettings` object above and a user filled when creating the resource.\n\nThe whole `set_up` method should look like this:\n\n```python\nfrom tracardi.service.storage.driver import storage\n\nclass MyPlugin (ActionRunner):\n\n    config: dict\n    credentials: MyResourceConfig # (1)\n\n    \n    async def set_up (self, config):\n      self.config = config\n      resource = await storage.driver.resource.load (config.resource.id)\n      self.credentials = resource.credentials.get_credentials (self, output = MyResourceConfig)\n\n\n    # (2)\n```\n\n1. We have added the credentials' property of type `MyResourceConfig`. We'll have to define it yet.\n2. Rest of plugin code.\n\n### Validating the resource \n\nWe still have some parts missing. We need to validate the data from the resource and extend the configuration so that\nthe user can select the appropriate resource in the form.\n\nTo verify the data from the resource and make it readable, we need to create the `MyResourceConfig` object. I named\nit in this line:\n\n```python\n self.credentials = resource.credentials.get_credentials(self, output=MyResourceConfig) # (1)\n```\n\n1. See `output = MyResourceConfig`\n\nIn `output=MyResourceConfig`, I requested that the credentials loaded from the resource be in the form of a\n`MyResourceConfig` object. I don't have it yet, so let's create it. We usually store resource objects in the\ndirectory: `tracardi/domain/resources`\n\n=== \"tracardi/domain/resources/my_resource_config.py\"\n    ```python\n    from pydantic import BaseModel, AnyHttpUrl\n    from typing import Optional \n    \n    \n    class MyResourceConfig(BaseModel):\n        url: AnyHttpUrl\n        method: str\n        api_key: Optional[str] = None\n    ```\n\n!!! Tip\n     It must have the same schema as defined in config in `ResourceSettings`. Note that I defined `url` as` AnyHttpUrl` this\n     means it can only accept a string that looks like a URL. On the other hand, `api_key` is of type `Optional[str]`, which\n     means that such a property may not be available or be None.\n\nWe already have an object, so we have to extend the plug-in configuration with the resource. The resource will be\nselected from the list of available resources, and it will be identified as the resource __name and id__.\n\nExample\n\n```json\n{\n  \"id\": \"9bb2a926-b6ae-4cad-9b3c-9380ea7bfede\",\n  \"name\": \"My API\"\n}\n```\n\nFor this purpose, we will add a resource to the plug-in configuration, which, let me remind you, is in the `register`\nfunction under the `init` property.\n\nIt should look like this:\n\n```python hl_lines=\"8-11\"\ndef register () -> Plugin:\n    return Plugin (\n        start = False,\n        spec = Spec (\n            module = __name__,\n            className = MyPlugin.__name__,\n            init = {\n                \"resource\": {\n                    \"id\": \"\",\n                    \"name\": \"\"\n                },\n                \"event_type\": \"\",\n                \"data\": \"\"\n            },\n            inputs = [\"payload\"],\n            outputs = [\"MyEvent\", \"NotMyEvent\"],\n            version = '0.1',\n            license = \"MIT\",\n            author = \"Your Name\"\n        ),\n        metadata = MetaData (\n            name = \"My first plugin\",\n            desc = 'Checks if the event type is equal to my-event.',\n            group = [\"Test plugin\"]\n        )\n    )\n\n```\n\nWe also need to extend the configuration validation object.\n\n```python hl_lines=\"4\"\nfrom tracardi.domain.named_entity import NamedEntity\n\nclass Configuration(PluginConfig):\n    resource: NamedEntity # (1)\n    event_type: str\n    data: str\n\n    @validator(\"event_type\")\n    def must_not_be_empty (cls, value):\n        if len (value) == 0:\n            raise ValueError (\"Event type can not be empty.\")\n        return value\n        \n    @validator(\"data\") \n    def data_must_not_be_empty(cls, value):\n        if len(value) == 0:\n            raise ValueError(\"Data can not be empty. \")\n        return value    \n\n```\n\n1. NamedEntity is an object containing __id and name__. It is already defined in Tracardi.\n\n\n### Resource select field\n\nIt remains to add a field to the form that will allow user to select a resource from the list of defined\nresources. Remember that there may be different types of resources created in the system, so we need to filter them so\nthat only those related to our plugin are on the list of resources.\n\nThis is done by pointing to the tag we defined in `ResourceSettings`. In our case it is `api` __(tags=[\"api\"])__.\n\nNow we have all the information. We must extend the form with the __resource select__ field that displays available\nresources, so the user will be able to select one.\n\nPlease add this code to `form` in the `register` function.\n\n```python\nFormField(\n    id=\"resource\",\n    name=\"Resource\",\n    description=\"Select your API resource.\",\n    component=FormComponent(type=\"resource\", props={\"label\": \"API Resource\", \"tag\": \"api\"})  # (1)\n),\n```\n\n1. Notice tag property equal to `api`\n\nThe `form` property should look like this.\n\n```python hl_lines=\"6-11\"\nform = Form(groups=[\n    FormGroup(\n        name=\"Event type plugin configuration\",\n        description=\"Define required event type\",\n        fields=[\n            FormField(\n                id=\"resource\",\n                name=\"Resource\",\n                description=\"Select your API resource.\",\n                component=FormComponent(type=\"resource\", props={\"label\": \"API Resource\", \"tag\": \"api\"})\n            ),\n            FormField(\n                id=\"event_type\",\n                name=\"Event type\",\n                description=\"Event type to check\",\n                component=FormComponent(type=\"text\", props={\"label\": \"Event type\"})  # \n            )\n        ]\n    )\n])\n```\n\nUp till now:\n\n* We created a resource and resource validation object\n* Extended the configuration and validation of plugin initial configuration\n* Extended the plugin form with the resource select field. \n\nThe last part is connecting to the API\n\n!!! Info\n    This will be described soon\n"}