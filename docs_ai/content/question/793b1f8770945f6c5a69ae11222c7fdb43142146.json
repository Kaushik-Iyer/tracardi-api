{"file_name": "docs/plugins/tutorial/part2.md", "questions": ["What is the process for setting up and using the \"event_type\" property in the plugin?"], "answer": "## JSON Configuration\nIn the register function, we add the following entry in the spec:\n\n```python\ninit = {\n    \"event_type\": \"\"  # (1)\n}\n```\n\n1. We set up `event_type` as empty string. Later user inside the system can change it to something meaningful. The init\n   serves as a default configuration value.\n\nThis way we define that the object should have the \"event_type\" property, which we will use later in the plugin.\n\nThe entire register function should look like this:\n\n```python hl_lines=\"11-13\"\nfrom tracardi.service.plugin.domain.register import Plugin, Spec, MetaData\n\n\ndef register() -> Plugin:\n    return Plugin(\n\n        start=False,\n        spec=Spec(\n            module=__name__,\n            className=MyPlugin.__name__,\n            init={  # (1)\n                \"event_type\": \"\"\n            },\n            inputs=[\"payload\"],\n            outputs=[\"MyEvent\", \"NotMyEvent\"],\n            version='0.1',\n            license=\"MIT\",\n            author=\"Your Name\"\n        ),\n        metadata=MetaData(\n            name=\"My first plugin\",\n            desc='Checks if the event type is equal to my-event.',\n            group=[\"Test plugin\"]\n        )\n    )\n```\n\n1. Configuration initialisation\n\nOK now let's use `event_type` in the plugin. First, we will have to read the initialized configuration and save it to\nthe object.\n\nWe will use the `set_up` method for this.\n\n```python\nfrom tracardi.service.plugin.runner import ActionRunner\n\n\nclass MyPlugin(ActionRunner):\n    config: dict\n\n    async def set_up(self, config):\n        self.config = config\n\n    ...  # (1)\n```\n\n1. The rest of the code\n\nThis way we saved the configuration data in the plugin class.\n\nNow let's use the `self.config` property in the run method and replace __\"my-event\"__ with it.\n\n```python\nfrom tracardi.service.plugin.runner import ActionRunner\nfrom tracardi.service.plugin.domain.result import Result\n\n\nclass MyPlugin(ActionRunner):\n    config: dict\n\n    async def set_up(self, config):\n        self.config = config\n\n    async def run(self, payload: dict, in_edge=None):\n        if self.event.type == self.config['event-type']:\n            return Result(port=\"MyEvent\", value=payload)\n        else:\n            return Result(port=\"NotMyEvent\", value={})\n```\n\nThat's it for the moment.\n\nThe whole process is as follows. The system registers the plugin and saves in it the default configuration from\nthe `Spec.init` property. In our case it is:\n\n```json\n{\n  \"event_type\": \"\"\n}\n```\n\nWhen the user moves the plug-in to the workflow and starts it, the configuration from the plug-in is put as a parameter\nto the `set_up` method. In the method, we set `self.config` to the value from the parameter (i.e. the one\nfrom `spec.init`).\nIf the user changed the configuration in the editor before the first run, the changed values are of course substituted\nas the config parameter.\n\nThen `self.config` is used to read the value of `event-type` and perform a\ncomparison `if self.event.type == self.config['event-type']` in the run method.\n\nComplete code looks like this:\n\n=== \"/tracardi/process_engine/action/v1/my_plugin_folder/my_plugin.py\"\n\n    ```python\n    from tracardi.service.plugin.runner import ActionRunner\n    from tracardi.service.plugin.domain.result import Result\n    from tracardi.service.plugin.domain.register import Plugin, Spec, MetaData\n    \n    class MyPlugin (ActionRunner):\n    \n        config: dict\n        \n        async def set_up(self, config):\n          self.config = config\n        \n        async def run(self, payload: dict, in_edge = None):\n            if self.event.type == self.config['event-type']:\n                return Result(port = \"MyEvent\", value = payload)\n    \n            else:\n                return Result(port = \"NotMyEvent\", value = {})\n    \n    def register () -> Plugin:\n        return Plugin (\n    \n            start = False,\n            spec = Spec (\n                module = __name__,\n                className = 'MyPlugin',\n                init = {\n                   \"event_type\": \"\"\n                },\n                inputs = [\"payload\"],\n                outputs = [\"MyEvent\", \"NotMyEvent\"],\n                version = '0.1',\n                license = \"MIT\",\n                author = \"Your Name\"\n            ),\n            metadata = MetaData (\n                name = \"My first plugin\",\n                desc = 'Checks if the event type is equal to my-event.',\n                group = [\"Test plugin\"]\n            )\n        )\n    ```\n\n!!! Info\n    Please check if the code works step by step. You do not have to implement everything to check if the code works.\n    Every time you complete some part of the tutorial you may save the changes and reinstall plugins and see how it\n    works in the workflow editor. Installation of the changed plugin can be done in the workflow editor by clicking\n    the `Reinstall plugins` button."}